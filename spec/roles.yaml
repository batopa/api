swagger: '2.0'
info:
  title:
  description:
  termsOfService:
  version:
host: be4-test.bedita.net
basePath: /
schemes:
  - https
paths:
  /roles:
    get:
      security:
        - Bearer: []
      description: Returns roles
      summary: Retrieve a list of roles
      tags:
        - roles
      consumes:
        - application/json
        - application/vnd.api+json
      produces:
        - application/json
        - application/vnd.api+json
      responses:
        '200':
          description: Successful operation
          schema:
            properties:
              data:
                type: array
                items:
                  required: ['id', 'type']
                  properties:
                    id:
                      type: integer
                    type:
                      type: string
                      enum: ['roles']
                    attributes:
                      $ref: '#/definitions/Role'
                    links:
                      $ref: '#/definitions/LinkSelf'
                    relationships:
                      $ref: '#/definitions/RelationshipUser'
              links:
                $ref: '#/definitions/LinkPagination'
              meta:
                $ref: '#/definitions/MetaPagination'

    post:
      security:
        - Bearer: []
      tags:
        - roles
      summary: Create role
      description: Role creation
      produces:
        - application/json
        - application/vnd.api+json
      parameters:
        - in: body
          name: body
          description: Role data
          required: true
          schema:
            $ref: '#/definitions/NewRoleParam'
      responses:
        '200':
          description: Successful operation
          schema:
            properties:
              data:
                required: ["id", "type"]
                properties:
                  id:
                    type: integer
                  type:
                    type: string
                    enum: ['roles']
                  attributes:
                    $ref: '#/definitions/Role'
                  relationships:
                    $ref: '#/definitions/RelationshipUser'
              links:
                $ref: '#/definitions/Link'
        '400':
          description: Invalid data supplied

  '/roles/{id}':
    get:
      security:
        - Bearer: []
      tags:
        - roles
      summary: Get role by role id
      description: ''
      produces:
        - application/json
        - application/vnd.api+json
      parameters:
        - name: id
          in: path
          description: 'The id of the role to be fetched.'
          required: true
          type: integer
      responses:
        '200':
          description: Successful operation
          schema:
            properties:
              data:
                required: ["id", "type"]
                properties:
                  id:
                    type: integer
                  type:
                    type: string
                    enum: ['roles']
                  attributes:
                    $ref: '#/definitions/Role'
                  relationships:
                    $ref: '#/definitions/RelationshipUser'
              links:
                $ref: '#/definitions/Link'
        '404':
          description: Role not found
          schema:
            $ref: '#/definitions/404Response'

    patch:
      security:
        - Bearer: []
      tags:
        - roles
      summary: Modify role
      description: Modify role data
      produces:
        - application/json
        - application/vnd.api+json
      parameters:
        - name: id
          in: path
          description: 'The id of the role to be fetched.'
          required: true
          type: integer
        - name: role
          in: body
          description: 'Role data.'
          required: true
          schema:
            $ref: '#/definitions/EditRoleParam'
      responses:
        '200':
          description: Successful operation
          schema:
            properties:
              data:
                required: ["id", "type"]
                properties:
                  id:
                    type: integer
                  type:
                    type: string
                    enum: ['roles']
                  attributes:
                    $ref: '#/definitions/Role'
                  relationships:
                    $ref: '#/definitions/RelationshipUser'
              links:
                $ref: '#/definitions/Link'
        '400':
          description: Invalid data supplied
        '409':
          description: Conflict - IDs don't match

    delete:
      security:
        - Bearer: []
      tags:
        - roles
      summary: Remove role by role id
      description: ''
      produces:
        - application/json
        - application/vnd.api+json
      parameters:
        - name: id
          in: path
          description: 'The id of the role to remove.'
          required: true
          type: integer
      responses:
        '204':
          description: Successful operation | No content
        '404':
          description: Role not found
          schema:
            $ref: '#/definitions/404Response'

  '/roles/{id}/users':
    get:
      security:
        - Bearer: []
      tags:
        - roles
      summary: Get users by role id
      description: ''
      produces:
        - application/json
        - application/vnd.api+json
      parameters:
        - name: id
          in: path
          description: 'The id of the role whose users should be fetched.'
          required: true
          type: integer
      responses:
        '200':
          description: Successful operation
          schema:
            properties:
              data:
                type: array
                items:
                  required: ["id", "type"]
                  properties:
                    id:
                      type: integer
                    type:
                      type: string
                      enum: ['users']
                    attributes:
                      $ref: '#/definitions/User'
                    links:
                      $ref: '#/definitions/LinkSelf'
                    relationships:
                      $ref: '#/definitions/RelationshipRole'
              links:
                $ref: '#/definitions/LinkPagination'
              meta:
                $ref: '#/definitions/MetaPagination'

  '/roles/{id}/relationships/users':
    post:
      security:
        - Bearer: []
      tags:
        - roles
      summary: Add users by role id
      description: ''
      produces:
        - application/json
        - application/vnd.api+json
      parameters:
        - name: id
          in: path
          description: 'The id of the role.'
          required: true
          type: integer
        - name: user
          in: body
          description: 'User data.'
          required: true
          schema:
            $ref: '#/definitions/UserParam'
      responses:
        '200':
          description: Successful operation
    delete:
      security:
        - Bearer: []
      tags:
        - roles
      summary: Remove user role by role id
      description: ''
      produces:
        - application/json
        - application/vnd.api+json
      parameters:
        - name: id
          in: path
          description: 'The id of the role.'
          required: true
          type: integer
        - name: user
          in: body
          description: 'User data.'
          required: true
          schema:
            $ref: '#/definitions/UserParam'
      responses:
        '200':
          description: Successful operation

definitions:
  RelationshipUser:
    properties:
      users:
        properties:
          links:
            properties:
              related:
                type: string
              self:
                type: string
  RelationshipRole:
    properties:
      roles:
        properties:
          links:
            properties:
              related:
                type: string
              self:
                type: string
  LinkSelf:
    properties:
      self:
        type: string
  LinkPagination:
    properties:
      self:
        type: string
      home:
        type: string
      first:
        type: string
      last:
        type: string
      prev:
        type: string
      next:
        type: string
  MetaPagination:
    properties:
      pagination:
        properties:
          count:
            type: integer
          page:
            type: integer
          page_count:
            type: integer
          page_items:
            type: integer
          page_size:
            type: integer
  Link:
    properties:
      self:
        type: string
      home:
        type: string
  Meta:
    properties:
      jwt:
        type: string
      renew:
        type: string
  NewRoleParam:
    properties:
      data:
        required: [ "type", "attributes" ]
        properties:
          type:
            type: string
            enum: ['roles']
          attributes:
            $ref: '#/definitions/Role'
  EditRoleParam:
    properties:
      data:
        required: [ "id", "type", "attributes" ]
        properties:
          id:
            type: integer
          type:
            type: string
            enum: ['roles']
          attributes:
            $ref: '#/definitions/Role'
  Role:
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
      unchangeable:
        type: boolean
      created:
        type: string
        format: date-time
      modified:
        type: string
        format: date-time
  UserParam:
    properties:
      data:
        required: ["id", "type"]
        properties:
          id:
            type: integer
          type:
            type: string
            enum: ['users']
  User:
    properties:
      username:
        type: string
      password:
        type: string
      name:
        type: string
      surname:
        type: string
      blocked:
        type: boolean
      last_login:
        type: string
        format: date-time
      last_login_err:
        type: string
        format: date-time
      num_login_err:
        type: integer
      email:
        type: string
      person_title:
        type: string
      gender:
        type: string
      birthdate:
        type: string
        format: date-time
      deathdate:
        type: string
        format: date-time
      company:
        type: boolean
      company_name:
        type: string
      company_kind:
        type: string
      street_address:
        type: string
      city:
        type: string
      zipcode:
        type: string
      country:
        type: string
      state_name:
        type: string
      phone:
        type: string
      website:
        type: string
      status:
        type: string
        enum: ['on', 'off', 'draft']
      uname:
        type: string
      locked:
        type: boolean
      created:
        type: string
        format: date-time
      modified:
        type: string
        format: date-time
      published:
        type: string
        format: date-time
      title:
        type: string
      description:
        type: string
      body:
        type: string
      extra:
        type: string
      lang:
        type: string
      created_by:
        type: integer
      modified_by:
        type: integer
      publish_start:
        type: string
        format: date-time
      publish_end:
        type: string
        format: date-time
  404Response:
    type: object
    properties:
      error:
        type: object
        properties:
          status:
            type: integer
            enum: ['404']
          title:
            type: string
            enum: ['Not Found']
      links:
        type: object
        properties:
          self:
            type: string
          home:
            type: string
