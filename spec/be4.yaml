swagger: '2.0'
info:
    title: 'BEdita 4 API'
    description: "BEdita 4 base endpoints specification\n\nFor accessing the API \"write\" calls (as POST, PATCH, DELETE) a valid JWT token must be generated\nand passed in all the queries in the 'Authorization' header.\n\nYou can generate a valid jwt token by the API call POST /auth giving a valid username and password;\nresponse meta.jwt contains valid jwd token.\nFor example, jwt string can be like 'eyJ0eXAiOi...2ljSerKQygk2T8'.\n\nUse the following syntax in the 'Authorization' header:\n\n    Bearer: eyJ0eXAiOi...2ljSerKQygk2T8\n"
    termsOfService: 'http://swagger.io/terms/'
    version: 1.0.0
host: be4-test.bedita.net
basePath: /
schemes:
    - https
paths:
    /auth: { post: { description: "Authentication process and token renewal.\n\nYou do auth with POST /auth, passing auth data in as formData parameters. For instance:\n\n```\nusername: johndoe\npassword: ******\n```\n\nYou renew token with POST /auth, using header parameter Authorization. For example:\n\n```\nAuthorization: 'Bearer eyJ0eXAiOi...2ljSerKQygk2T8'\n```\n", summary: 'Perform auth or renew token', tags: [auth], consumes: [application/x-www-form-urlencoded], produces: [application/json, application/vnd.api+json], parameters: [{ name: username, in: formData, required: false, pattern: '[a-z0-9]{8,64}', minLength: 8, maxLength: 64, type: string }, { name: password, in: formData, required: false, type: string }, { in: header, name: Authorization, description: 'Use token prefixed with ''Bearer''', required: false, type: string }], responses: { 200: { description: 'Login successfull', schema: { properties: { links: { $ref: '#/definitions/Link' }, meta: { $ref: '#/definitions/Meta' } } } }, 401: { description: 'Unauthorized user, or invalid renew token' } } }, get: { description: "Get logged user profile data.\nUse token prefixed specifing parameter Authorization in Header with value 'Bearer $renewToken'. For example:\n\n'Bearer eyJ0eXAiOi...2ljSerKQygk2T8'\n", summary: 'Get auth data', tags: [auth], consumes: [application/json, application/vnd.api+json], produces: [application/json, application/vnd.api+json], parameters: [{ in: header, name: Authorization, description: 'I.e. ''Bearer eyJ...2T8''', required: true, type: string }], responses: { 200: { description: Success, schema: { properties: { data: { type: array, items: { required: [id, type], properties: { id: { type: integer }, type: { type: string, enum: [users] }, attributes: { $ref: '#/definitions/User' }, relationships: { $ref: '#/definitions/Relantionship' } } } }, links: { $ref: '#/definitions/Link' } } } } } } }
    /home: { get: { security: [{ Bearer: [ ] }], description: 'API endpoints info', summary: 'Retrieve a list of endpoints available', tags: [home], consumes: [application/json, application/vnd.api+json], produces: [application/json, application/vnd.api+json], responses: { 200: { description: 'Successful operation', schema: { $ref: '#/definitions/Home200Response' } } } } }
    /roles: { get: { security: [{ Bearer: [ ] }], description: 'Returns roles', summary: 'Retrieve a list of roles', tags: [roles], consumes: [application/json, application/vnd.api+json], produces: [application/json, application/vnd.api+json], responses: { 200: { description: 'Successful operation', schema: { properties: { data: { type: array, items: { required: [id, type], properties: { id: { type: integer }, type: { type: string, enum: [roles] }, attributes: { $ref: '#/definitions/Role' }, links: { $ref: '#/definitions/LinkSelf' }, relationships: { $ref: '#/definitions/RelationshipUser' } } } }, links: { $ref: '#/definitions/LinkPagination' }, meta: { $ref: '#/definitions/MetaPagination' } } } } } }, post: { security: [{ Bearer: [ ] }], tags: [roles], summary: 'Create role', description: 'Role creation', produces: [application/json, application/vnd.api+json], parameters: [{ in: body, name: body, description: 'Role data', required: true, schema: { $ref: '#/definitions/NewRoleParam' } }], responses: { 200: { description: 'Successful operation', schema: { properties: { data: { required: [id, type], properties: { id: { type: integer }, type: { type: string, enum: [roles] }, attributes: { $ref: '#/definitions/Role' }, relationships: { $ref: '#/definitions/RelationshipUser' } } }, links: { $ref: '#/definitions/Link' } } } }, 400: { description: 'Invalid data supplied' } } } }
    '/roles/{id}': { get: { security: [{ Bearer: [ ] }], tags: [roles], summary: 'Get role by role id', description: '', produces: [application/json, application/vnd.api+json], parameters: [{ name: id, in: path, description: 'The id of the role to be fetched.', required: true, type: integer }], responses: { 200: { description: 'Successful operation', schema: { properties: { data: { required: [id, type], properties: { id: { type: integer }, type: { type: string, enum: [roles] }, attributes: { $ref: '#/definitions/Role' }, relationships: { $ref: '#/definitions/RelationshipUser' } } }, links: { $ref: '#/definitions/Link' } } } }, 404: { description: 'Role not found', schema: { $ref: '#/definitions/404Response' } } } }, patch: { security: [{ Bearer: [ ] }], tags: [roles], summary: 'Modify role', description: 'Modify role data', produces: [application/json, application/vnd.api+json], parameters: [{ name: id, in: path, description: 'The id of the role to be fetched.', required: true, type: integer }, { name: role, in: body, description: 'Role data.', required: true, schema: { $ref: '#/definitions/EditRoleParam' } }], responses: { 200: { description: 'Successful operation', schema: { properties: { data: { required: [id, type], properties: { id: { type: integer }, type: { type: string, enum: [roles] }, attributes: { $ref: '#/definitions/Role' }, relationships: { $ref: '#/definitions/RelationshipUser' } } }, links: { $ref: '#/definitions/Link' } } } }, 400: { description: 'Invalid data supplied' }, 409: { description: 'Conflict - IDs don''t match' } } }, delete: { security: [{ Bearer: [ ] }], tags: [roles], summary: 'Remove role by role id', description: '', produces: [application/json, application/vnd.api+json], parameters: [{ name: id, in: path, description: 'The id of the role to remove.', required: true, type: integer }], responses: { 204: { description: 'Successful operation | No content' }, 404: { description: 'Role not found', schema: { $ref: '#/definitions/404Response' } } } } }
    '/roles/{id}/users': { get: { security: [{ Bearer: [ ] }], tags: [roles], summary: 'Get users by role id', description: '', produces: [application/json, application/vnd.api+json], parameters: [{ name: id, in: path, description: 'The id of the role whose users should be fetched.', required: true, type: integer }], responses: { 200: { description: 'Successful operation', schema: { properties: { data: { type: array, items: { required: [id, type], properties: { id: { type: integer }, type: { type: string, enum: [users] }, attributes: { $ref: '#/definitions/User' }, links: { $ref: '#/definitions/LinkSelf' }, relationships: { $ref: '#/definitions/RelationshipRole' } } } }, links: { $ref: '#/definitions/LinkPagination' }, meta: { $ref: '#/definitions/MetaPagination' } } } } } } }
    '/roles/{id}/relationships/users': { post: { security: [{ Bearer: [ ] }], tags: [roles], summary: 'Add users by role id', description: '', produces: [application/json, application/vnd.api+json], parameters: [{ name: id, in: path, description: 'The id of the role.', required: true, type: integer }, { name: user, in: body, description: 'User data.', required: true, schema: { $ref: '#/definitions/UserParam' } }], responses: { 200: { description: 'Successful operation' } } }, delete: { security: [{ Bearer: [ ] }], tags: [roles], summary: 'Remove user role by role id', description: '', produces: [application/json, application/vnd.api+json], parameters: [{ name: id, in: path, description: 'The id of the role.', required: true, type: integer }, { name: user, in: body, description: 'User data.', required: true, schema: { $ref: '#/definitions/UserParam' } }], responses: { 200: { description: 'Successful operation' } } } }
    /status: { get: { security: [{ Bearer: [ ] }], description: 'API endpoints status', summary: 'Retrieve API status', tags: [status], consumes: [application/json, application/vnd.api+json], produces: [application/json, application/vnd.api+json], responses: { 200: { description: 'Successful operation', schema: { $ref: '#/definitions/Status200Response' } } } } }
    /trash: { get: { security: [{ Bearer: [ ] }], description: 'Returns objects in trash', summary: 'Retrieve a list of objects', tags: [trash], consumes: [application/json, application/vnd.api+json], produces: [application/json, application/vnd.api+json], responses: { 200: { description: 'Successful operation', schema: { properties: { data: { type: array, items: { required: [id, type], properties: { id: { type: integer }, type: { type: string } } } }, links: { $ref: '#/definitions/LinkPagination' }, meta: { $ref: '#/definitions/MetaPagination' } } } } } } }
    '/trash/{id}': { get: { security: [{ Bearer: [ ] }], tags: [trash], summary: 'Get trash item by id', description: '', produces: [application/json, application/vnd.api+json], parameters: [{ name: id, in: path, description: 'The id of the trash item to be fetched.', required: true, type: integer }], responses: { 200: { description: 'Successful operation', schema: { properties: { data: { required: [id, type], properties: { id: { type: integer }, type: { type: string }, attributes: { $ref: '#/definitions/Object' } } }, links: { $ref: '#/definitions/Link' } } } }, 404: { description: 'Object not found' } } }, patch: { security: [{ Bearer: [ ] }], tags: [trash], summary: 'Restore item from trash', description: 'Restore item from trash', produces: [application/json, application/vnd.api+json], parameters: [{ name: id, in: path, description: 'The id of the trash item to be restored.', required: true, type: integer }, { name: object, in: body, description: 'Object data.', required: true, schema: { properties: { data: { required: [id, type], properties: { id: { type: integer }, type: { type: string, enum: [objects] } } } } } }], responses: { 204: { description: 'Successful operation | No content' }, 404: { description: 'Object not found' } } }, delete: { security: [{ Bearer: [ ] }], tags: [trash], summary: 'Delete trash object by id', description: 'Delete object from trash', produces: [application/json, application/vnd.api+json], parameters: [{ name: id, in: path, description: 'The id of the trash item to be deleted.', required: true, type: integer }], responses: { 204: { description: 'Successful operation | No content' }, 404: { description: 'Object not found' } } } }
    /signup: { post: { security: [{ Bearer: [ ] }], tags: [users], summary: 'Signup user', description: 'User signup', parameters: [{ in: body, name: body, description: 'User data', required: true, schema: { $ref: '#/definitions/SignupUserParam' } }], responses: { 202: { description: 'Successful operation' }, 400: { description: 'Invalid data supplied' }, 405: { description: 'Method Not Allowed' } } } }
    /users: { get: { security: [{ Bearer: [ ] }], description: 'Returns users data', summary: 'Retrieve a list of users', tags: [users], consumes: [application/json, application/vnd.api+json], produces: [application/json, application/vnd.api+json], responses: { 200: { description: 'Successful operation', schema: { properties: { data: { type: array, items: { required: [id, type], properties: { id: { type: integer }, type: { type: string, enum: [users] }, attributes: { $ref: '#/definitions/User' }, links: { $ref: '#/definitions/LinkSelf' }, relationships: { $ref: '#/definitions/RelationshipRole' } } } }, links: { $ref: '#/definitions/LinkPagination' }, meta: { $ref: '#/definitions/MetaPagination' } } } } } }, post: { security: [{ Bearer: [ ] }], tags: [users], summary: 'Create user', description: 'User creation', produces: [application/json, application/vnd.api+json], parameters: [{ in: body, name: body, description: 'User data', required: true, schema: { $ref: '#/definitions/NewUserParam' } }], responses: { 200: { description: 'Successful operation', schema: { properties: { data: { required: [id, type], properties: { id: { type: integer }, type: { type: string, enum: [users] }, attributes: { $ref: '#/definitions/User' }, relationships: { $ref: '#/definitions/RelationshipRole' } } }, links: { $ref: '#/definitions/Link' } } } }, 400: { description: 'Invalid data supplied' } } } }
    '/users/{id}': { get: { security: [{ Bearer: [ ] }], tags: [users], summary: 'Get user by user id', description: '', produces: [application/json, application/vnd.api+json], parameters: [{ name: id, in: path, description: 'The id of the user to be fetched.', required: true, type: integer }], responses: { 200: { description: 'Successful operation', schema: { properties: { data: { required: [id, type], properties: { id: { type: integer }, type: { type: string, enum: [users] }, attributes: { $ref: '#/definitions/User' }, relationships: { $ref: '#/definitions/RelationshipRole' } } }, links: { $ref: '#/definitions/Link' } } } }, 404: { description: 'User not found' } } }, patch: { security: [{ Bearer: [ ] }], tags: [users], summary: 'Modify user', description: 'Modify user data', produces: [application/json, application/vnd.api+json], parameters: [{ name: id, in: path, description: 'The id of the user to be fetched.', required: true, type: integer }, { name: user, in: body, description: 'User data.', required: true, schema: { $ref: '#/definitions/EditUserParam' } }], responses: { 200: { description: 'Successful operation', schema: { properties: { data: { required: [id, type], properties: { id: { type: integer }, type: { type: string, enum: [users] }, attributes: { $ref: '#/definitions/User' }, relationships: { $ref: '#/definitions/RelationshipRole' } } }, links: { $ref: '#/definitions/Link' } } } }, 400: { description: 'Invalid data supplied' }, 409: { description: 'Conflict - IDs don''t match' } } }, delete: { security: [{ Bearer: [ ] }], tags: [users], summary: 'Remove user by user id', description: '', produces: [application/json, application/vnd.api+json], parameters: [{ name: id, in: path, description: 'The id of the user to remove.', required: true, type: integer }], responses: { 204: { description: 'Successful operation | No content' }, 404: { description: 'User not found' } } } }
    '/users/{id}/roles': { get: { security: [{ Bearer: [ ] }], tags: [users], summary: 'Get roles by user id', description: '', produces: [application/json, application/vnd.api+json], parameters: [{ name: id, in: path, description: 'The id of the user to be fetched.', required: true, type: integer }], responses: { 200: { description: 'Successful operation', schema: { properties: { data: { type: array, items: { required: [id, type], properties: { id: { type: integer }, type: { type: string, enum: [roles] }, attributes: { $ref: '#/definitions/Role' }, links: { $ref: '#/definitions/LinkSelf' }, relationships: { $ref: '#/definitions/RelationshipUser' } } } }, links: { $ref: '#/definitions/LinkPagination' }, meta: { $ref: '#/definitions/MetaPagination' } } } } } } }
    '/users/{id}/relationships/roles': { post: { security: [{ Bearer: [ ] }], tags: [users], summary: 'Add user role by user id', description: '', produces: [application/json, application/vnd.api+json], parameters: [{ name: id, in: path, description: 'The id of the user to remove.', required: true, type: integer }, { name: role, in: body, description: 'Role data.', required: true, schema: { $ref: '#/definitions/RoleParam' } }], responses: { 200: { description: 'Successful operation' } } }, delete: { security: [{ Bearer: [ ] }], tags: [users], summary: 'Remove user role by user id', description: '', produces: [application/json, application/vnd.api+json], parameters: [{ name: id, in: path, description: 'The id of the user to remove.', required: true, type: integer }, { name: role, in: body, description: 'Role data.', required: true, schema: { $ref: '#/definitions/RoleParam' } }], responses: { 200: { description: 'Successful operation' } } } }
definitions:
    SignupUserParam: { properties: { data: { required: [type, attributes], properties: { type: { type: string, enum: [users] }, attributes: { $ref: '#/definitions/SignupUser' }, meta: { $ref: '#/definitions/SignupMeta' } } } } }
    SignupMeta: { properties: { activation_url: { type: string }, redirect_url: { type: string } } }
    SignupUser: { properties: { username: { type: string }, password: { type: string }, email: { type: string } } }
    RelationshipUser: { properties: { users: { properties: { links: { properties: { related: { type: string }, self: { type: string } } } } } } }
    RelationshipRole: { properties: { roles: { properties: { links: { properties: { related: { type: string }, self: { type: string } } } } } } }
    LinkSelf: { properties: { self: { type: string } } }
    LinkPagination: { properties: { self: { type: string }, home: { type: string }, first: { type: string }, last: { type: string }, prev: { type: string }, next: { type: string } } }
    MetaPagination: { properties: { pagination: { properties: { count: { type: integer }, page: { type: integer }, page_count: { type: integer }, page_items: { type: integer }, page_size: { type: integer } } } } }
    Link: { properties: { self: { type: string }, home: { type: string } } }
    Meta: { properties: { jwt: { type: string }, renew: { type: string } } }
    NewUserParam: { properties: { data: { required: [type, attributes], properties: { type: { type: string, enum: [users] }, attributes: { $ref: '#/definitions/User' } } } } }
    EditUserParam: { properties: { data: { required: [id, type, attributes], properties: { id: { type: integer }, type: { type: string, enum: [users] }, attributes: { $ref: '#/definitions/User' } } } } }
    RoleParam: { properties: { data: { required: [id, type], properties: { id: { type: integer }, type: { type: string, enum: [roles] } } } } }
    Role: { properties: { id: { type: integer }, name: { type: string }, description: { type: string }, unchangeable: { type: boolean }, created: { type: string, format: date-time }, modified: { type: string, format: date-time } } }
    User: { properties: { username: { type: string }, password: { type: string }, name: { type: string }, surname: { type: string }, blocked: { type: boolean }, last_login: { type: string, format: date-time }, last_login_err: { type: string, format: date-time }, num_login_err: { type: integer }, email: { type: string }, person_title: { type: string }, gender: { type: string }, birthdate: { type: string, format: date-time }, deathdate: { type: string, format: date-time }, company: { type: boolean }, company_name: { type: string }, company_kind: { type: string }, street_address: { type: string }, city: { type: string }, zipcode: { type: string }, country: { type: string }, state_name: { type: string }, phone: { type: string }, website: { type: string }, status: { type: string, enum: ['on', 'off', draft] }, uname: { type: string }, locked: { type: boolean }, created: { type: string, format: date-time }, modified: { type: string, format: date-time }, published: { type: string, format: date-time }, title: { type: string }, description: { type: string }, body: { type: string }, extra: { type: string }, lang: { type: string }, created_by: { type: integer }, modified_by: { type: integer }, publish_start: { type: string, format: date-time }, publish_end: { type: string, format: date-time } } }
    Object: { properties: { status: { type: string, enum: ['on', 'off', draft] }, uname: { type: string }, locked: { type: boolean }, created: { type: string, format: date-time }, modified: { type: string, format: date-time }, published: { type: string, format: date-time }, title: { type: string }, description: { type: string }, body: { type: string }, extra: { type: string }, lang: { type: string }, created_by: { type: integer }, modified_by: { type: integer }, publish_start: { type: string, format: date-time }, publish_end: { type: string, format: date-time } } }
    Status200Response: { properties: { links: { properties: { self: { type: string }, home: { type: string } } }, meta: { properties: { status: { $ref: '#/definitions/Environment' } } } } }
    Environment: { properties: { environment: { type: string } } }
    NewRoleParam: { properties: { data: { required: [type, attributes], properties: { type: { type: string, enum: [roles] }, attributes: { $ref: '#/definitions/Role' } } } } }
    EditRoleParam: { properties: { data: { required: [id, type, attributes], properties: { id: { type: integer }, type: { type: string, enum: [roles] }, attributes: { $ref: '#/definitions/Role' } } } } }
    UserParam: { properties: { data: { required: [id, type], properties: { id: { type: integer }, type: { type: string, enum: [users] } } } } }
    404Response: { type: object, properties: { error: { type: object, properties: { status: { type: integer, enum: ['404'] }, title: { type: string, enum: ['Not Found'] } } }, links: { type: object, properties: { self: { type: string }, home: { type: string } } } } }
    Home200Response: { properties: { links: { properties: { self: { type: string }, home: { type: string } } }, meta: { properties: { resources: { $ref: '#/definitions/MetaResources' } } } } }
    MetaResources: { properties: { /objects: { $ref: '#/definitions/Resource' }, /users: { $ref: '#/definitions/Resource' }, /roles: { $ref: '#/definitions/Resource' }, /object_types: { $ref: '#/definitions/Resource' }, /status: { $ref: '#/definitions/Resource' } } }
    Resource: { properties: { href: { type: string }, hints: { $ref: '#/definitions/Hint' } } }
    Hint: { properties: { allow: { type: array, items: { type: string } }, formats: { type: array, items: { type: string } } } }
    Relantionship: { properties: { roles: { $ref: '#/definitions/RelationShipRole' } } }
    RelationShipRole: { properties: { links: { $ref: '#/definitions/RoleLink' } } }
    RoleLink: { properties: { related: { type: string }, self: { type: string } } }
securityDefinitions:
    Bearer: { description: "Pass a valid JWT token in the 'Authorization' header.\n\nA valid JWT token is generated by the API and returned in the response meta.jwt of a call\nPOST /auth giving a valid username and password.\nFor example, jwt string can be like 'eyJ0eXAiOi...2ljSerKQygk2T8'.\n\nUse the following syntax in the 'Authorization' header:\n\n    Bearer: eyJ0eXAiOi...2ljSerKQygk2T8\n", type: apiKey, name: Authorization, in: header }
