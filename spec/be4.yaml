swagger: '2.0'
info:
    title: 'BEdita 4 API'
    description: 'BEdita 4 base endpoints specification'
    termsOfService: 'http://swagger.io/terms/'
    version: 1.0.0
host: be4-test.bedita.net
basePath: /
schemes:
    - https
paths:
    /auth: { post: { description: "Authentication process and token renewal.\n\nYou do auth with POST /auth, passing auth data in as formData parameters. For instance:\n\n```\nusername: johndoe\npassword: ******\n```\n\nYou renew token with POST /auth, using header parameter Authorization. For example:\n\n```\nAuthorization: 'Bearer eyJ0eXAiOi...2ljSerKQygk2T8'\n```\n", summary: 'Perform auth or renew token', tags: [auth], consumes: [application/json, application/vnd.api+json], produces: [application/json, application/vnd.api+json], parameters: [{ name: username, in: formData, required: false, pattern: '[a-z0-9]{8,64}', minLength: 8, maxLength: 64, type: string }, { name: password, in: formData, required: false, type: string }, { in: header, name: Authorization, description: 'Use token prefixed with ''Bearer''', required: false, type: string }], responses: { 200: { description: 'Login successfull', schema: { properties: { links: { $ref: '#/definitions/Link' }, meta: { $ref: '#/definitions/Meta' } } } }, 401: { description: 'Unauthorized user, or invalid renew token' } } }, get: { description: "Get logged user profile data.\nUse token prefixed specifing parameter Authorization in Header with value 'Bearer $renewToken'. For example:\n\n'Bearer eyJ0eXAiOi...2ljSerKQygk2T8'\n", summary: 'Get auth data', tags: [auth], consumes: [application/json, application/vnd.api+json], produces: [application/json, application/vnd.api+json], parameters: [{ in: header, name: Authorization, description: 'I.e. ''Bearer eyJ...2T8''', required: true, type: string }], responses: { 200: { description: Success, schema: { properties: { data: { type: array, items: { required: [id, type], properties: { id: { type: integer }, type: { type: string, enum: [users] }, attributes: { $ref: '#/definitions/User' }, relationships: { $ref: '#/definitions/Relantionship' } } } }, links: { $ref: '#/definitions/Link' } } } } } } }
    /home: { get: { description: 'API endpoints info', summary: 'Retrieve a list of endpoints available', tags: [home], consumes: [application/json, application/vnd.api+json], produces: [application/json, application/vnd.api+json], responses: { 200: { description: 'Successful operation', schema: { $ref: '#/definitions/Home200Response' } } } } }
    /roles: { get: { description: 'Returns roles', summary: 'Retrieve a list of roles', tags: [roles], consumes: [application/json, application/vnd.api+json], produces: [application/json, application/vnd.api+json], responses: { 200: { description: 'Successful operation', schema: { properties: { data: { type: array, items: { required: [id, type], properties: { id: { type: integer }, type: { type: string, enum: [roles] }, attributes: { $ref: '#/definitions/Role' } } } }, links: { type: object }, meta: { type: object } } } } } }, post: { tags: [roles], summary: 'Create role', description: 'Role creation', produces: [application/json, application/vnd.api+json], parameters: [{ in: body, name: body, description: 'Role data', required: true, schema: { $ref: '#/definitions/NewRoleParam' } }], responses: { 200: { description: 'Successful operation', schema: { properties: { data: { type: array, items: { required: [id, type], properties: { id: { type: integer }, type: { type: string, enum: [roles] }, attributes: { $ref: '#/definitions/Role' } } } }, links: { type: object }, meta: { type: object } } } }, 400: { description: 'Invalid data supplied' } } } }
    '/roles/{id}': { get: { tags: [roles], summary: 'Get role by role id', description: '', produces: [application/json, application/vnd.api+json], parameters: [{ name: id, in: path, description: 'The id of the role to be fetched.', required: true, type: integer }], responses: { 200: { description: 'Successful operation', schema: { properties: { data: { type: array, items: { required: [id, type], properties: { id: { type: integer }, type: { type: string, enum: [roles] }, attributes: { $ref: '#/definitions/Role' } } } }, links: { type: object }, meta: { type: object } } } }, 404: { description: 'Role not found', schema: { $ref: '#/definitions/404Response' } } } }, patch: { tags: [roles], summary: 'Modify role', description: 'Modify role data', produces: [application/json, application/vnd.api+json], parameters: [{ name: id, in: path, description: 'The id of the role to be fetched.', required: true, type: integer }, { name: role, in: body, description: 'Role data.', required: true, schema: { $ref: '#/definitions/EditRoleParam' } }], responses: { 200: { description: 'Successful operation', schema: { properties: { data: { type: array, items: { required: [id, type], properties: { id: { type: integer }, type: { type: string, enum: [roles] }, attributes: { $ref: '#/definitions/Role' } } } }, links: { type: object }, meta: { type: object } } } }, 400: { description: 'Invalid data supplied' }, 409: { description: 'Conflict - IDs don''t match' } } }, delete: { tags: [roles], summary: 'Remove role by role id', description: '', produces: [application/json, application/vnd.api+json], parameters: [{ name: id, in: path, description: 'The id of the role to remove.', required: true, type: integer }], responses: { 204: { description: 'Successful operation | No content' }, 404: { description: 'Role not found', schema: { $ref: '#/definitions/404Response' } } } } }
    '/roles/{id}/users': { get: { tags: [roles], summary: 'Get users by role id', description: '', produces: [application/json, application/vnd.api+json], parameters: [{ name: id, in: path, description: 'The id of the role whose users should be fetched.', required: true, type: integer }], responses: { 200: { description: 'Successful operation', schema: { properties: { data: { type: array, items: { required: [id, type], properties: { id: { type: integer }, type: { type: string, enum: [users] }, attributes: { $ref: '#/definitions/User' } } } }, links: { type: object }, meta: { type: object } } } } } } }
    '/roles/{id}/relationships/users': { post: { tags: [roles], summary: 'Add users by role id', description: '', produces: [application/json, application/vnd.api+json], parameters: [{ name: id, in: path, description: 'The id of the role.', required: true, type: integer }, { name: user, in: body, description: 'User data.', required: true, schema: { $ref: '#/definitions/UserParam' } }], responses: { 200: { description: 'Successful operation' } } }, delete: { tags: [roles], summary: 'Remove user role by role id', description: '', produces: [application/json, application/vnd.api+json], parameters: [{ name: id, in: path, description: 'The id of the role.', required: true, type: integer }, { name: user, in: body, description: 'User data.', required: true, schema: { $ref: '#/definitions/UserParam' } }], responses: { 200: { description: 'Successful operation' } } } }
    /status: { get: { description: 'API endpoints status', summary: 'Retrieve API status', tags: [status], consumes: [application/json, application/vnd.api+json], produces: [application/json, application/vnd.api+json], responses: { 200: { description: 'Successful operation', schema: { $ref: '#/definitions/Status200Response' } } } } }
    /users: { get: { description: 'Returns users data', summary: 'Retrieve a list of users', tags: [users], consumes: [application/json, application/vnd.api+json], produces: [application/json, application/vnd.api+json], responses: { 200: { description: 'Successful operation', schema: { properties: { data: { type: array, items: { required: [id, type], properties: { id: { type: integer }, type: { type: string, enum: [users] }, attributes: { $ref: '#/definitions/User' } } } }, links: { type: object }, meta: { type: object } } } } } }, post: { tags: [users], summary: 'Create user', description: 'User creation', produces: [application/json, application/vnd.api+json], parameters: [{ in: body, name: body, description: 'User data', required: true, schema: { $ref: '#/definitions/NewUserParam' } }], responses: { 200: { description: 'Successful operation', schema: { properties: { data: { type: array, items: { required: [id, type], properties: { id: { type: integer }, type: { type: string, enum: [users] }, attributes: { $ref: '#/definitions/User' } } } }, links: { type: object }, meta: { type: object } } } }, 400: { description: 'Invalid data supplied' } } } }
    '/users/{id}': { get: { tags: [users], summary: 'Get user by user id', description: '', produces: [application/json, application/vnd.api+json], parameters: [{ name: id, in: path, description: 'The id of the user to be fetched.', required: true, type: integer }], responses: { 200: { description: 'Successful operation', schema: { properties: { data: { type: array, items: { required: [id, type], properties: { id: { type: integer }, type: { type: string, enum: [users] }, attributes: { $ref: '#/definitions/User' } } } }, links: { type: object }, meta: { type: object } } } }, 404: { description: 'User not found' } } }, patch: { tags: [users], summary: 'Modify user', description: 'Modify user data', produces: [application/json, application/vnd.api+json], parameters: [{ name: id, in: path, description: 'The id of the user to be fetched.', required: true, type: integer }, { name: user, in: body, description: 'User data.', required: true, schema: { $ref: '#/definitions/EditUserParam' } }], responses: { 200: { description: 'Successful operation', schema: { properties: { data: { type: array, items: { required: [id, type], properties: { id: { type: integer }, type: { type: string, enum: [users] }, attributes: { $ref: '#/definitions/User' } } } }, links: { type: object }, meta: { type: object } } } }, 400: { description: 'Invalid data supplied' }, 409: { description: 'Conflict - IDs don''t match' } } }, delete: { tags: [users], summary: 'Remove user by user id', description: '', produces: [application/json, application/vnd.api+json], parameters: [{ name: id, in: path, description: 'The id of the user to remove.', required: true, type: integer }], responses: { 204: { description: 'Successful operation | No content' }, 404: { description: 'User not found' } } } }
    '/users/{id}/roles': { get: { tags: [users], summary: 'Get roles by user id', description: '', produces: [application/json, application/vnd.api+json], parameters: [{ name: id, in: path, description: 'The id of the user to be fetched.', required: true, type: integer }], responses: { 200: { description: 'Successful operation', schema: { properties: { data: { type: array, items: { required: [id, type], properties: { id: { type: integer }, type: { type: string, enum: [roles] }, attributes: { $ref: '#/definitions/Role' } } } }, links: { type: object }, meta: { type: object } } } } } } }
    '/users/{id}/relationships/roles': { post: { tags: [users], summary: 'Add user role by user id', description: '', produces: [application/json, application/vnd.api+json], parameters: [{ name: id, in: path, description: 'The id of the user to remove.', required: true, type: integer }, { name: role, in: body, description: 'Role data.', required: true, schema: { $ref: '#/definitions/RoleParam' } }], responses: { 200: { description: 'Successful operation' } } }, delete: { tags: [users], summary: 'Remove user role by user id', description: '', produces: [application/json, application/vnd.api+json], parameters: [{ name: id, in: path, description: 'The id of the user to remove.', required: true, type: integer }, { name: role, in: body, description: 'Role data.', required: true, schema: { $ref: '#/definitions/RoleParam' } }], responses: { 200: { description: 'Successful operation' } } } }
definitions:
    NewUserParam: { properties: { data: { required: [type, attributes], properties: { type: { type: string, enum: [users] }, attributes: { $ref: '#/definitions/User' } } } } }
    EditUserParam: { properties: { data: { required: [id, type, attributes], properties: { id: { type: integer }, type: { type: string, enum: [users] }, attributes: { $ref: '#/definitions/User' } } } } }
    RoleParam: { properties: { data: { required: [id, type], properties: { id: { type: integer }, type: { type: string, enum: [roles] } } } } }
    Role: { properties: { links: { $ref: '#/definitions/RoleLink' } } }
    User: { properties: { username: { type: string }, password: { type: string }, name: { type: string }, surname: { type: string }, blocked: { type: boolean }, last_login: { type: string, format: date-time }, last_login_err: { type: string, format: date-time }, num_login_err: { type: integer }, email: { type: string }, person_title: { type: string }, gender: { type: string }, birthdate: { type: string, format: date-time }, deathdate: { type: string, format: date-time }, company: { type: boolean }, company_name: { type: string }, company_kind: { type: string }, street_address: { type: string }, city: { type: string }, zipcode: { type: string }, country: { type: string }, state_name: { type: string }, phone: { type: string }, website: { type: string }, status: { type: string, enum: ['on', 'off', draft] }, uname: { type: string }, locked: { type: boolean }, created: { type: string, format: date-time }, modified: { type: string, format: date-time }, published: { type: string, format: date-time }, title: { type: string }, description: { type: string }, body: { type: string }, extra: { type: string }, lang: { type: string }, created_by: { type: integer }, modified_by: { type: integer }, publish_start: { type: string, format: date-time }, publish_end: { type: string, format: date-time } } }
    Status200Response: { properties: { links: { properties: { self: { type: string }, home: { type: string } } }, meta: { properties: { status: { $ref: '#/definitions/Environment' } } } } }
    Environment: { properties: { environment: { type: string } } }
    NewRoleParam: { properties: { data: { required: [type, attributes], properties: { type: { type: string, enum: [roles] }, attributes: { $ref: '#/definitions/Role' } } } } }
    EditRoleParam: { properties: { data: { required: [id, type, attributes], properties: { id: { type: integer }, type: { type: string, enum: [roles] }, attributes: { $ref: '#/definitions/Role' } } } } }
    UserParam: { properties: { data: { required: [id, type], properties: { id: { type: integer }, type: { type: string, enum: [users] } } } } }
    404Response: { type: object, properties: { error: { type: object, properties: { status: { type: integer, enum: ['404'] }, title: { type: string, enum: ['Not Found'] } } }, links: { type: object, properties: { self: { type: string }, home: { type: string } } } } }
    Home200Response: { properties: { links: { properties: { self: { type: string }, home: { type: string } } }, meta: { properties: { resources: { $ref: '#/definitions/MetaResources' } } } } }
    MetaResources: { properties: { /objects: { $ref: '#/definitions/Resource' }, /users: { $ref: '#/definitions/Resource' }, /roles: { $ref: '#/definitions/Resource' }, /object_types: { $ref: '#/definitions/Resource' }, /status: { $ref: '#/definitions/Resource' } } }
    Resource: { properties: { href: { type: string }, hints: { $ref: '#/definitions/Hint' } } }
    Hint: { properties: { allow: { type: array, items: { type: string } }, formats: { type: array, items: { type: string } } } }
    Relantionship: { properties: { roles: { $ref: '#/definitions/Role' } } }
    RoleLink: { properties: { related: { type: string }, self: { type: string } } }
    Link: { properties: { self: { type: string }, home: { type: string } } }
    Meta: { properties: { jwt: { type: string }, renew: { type: string } } }
