{
	"variables": [],
	"info": {
		"name": "BE4",
		"_postman_id": "2f4ed09a-656c-498c-8336-c982981e2afd",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "1. Auth & Signup",
			"description": "Authorization & Signup",
			"item": [
				{
					"name": "Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schemaAuth = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {\"type\": \"string\", \"format\": \"uri\"},",
									"                \"home\": {\"type\": \"string\", \"format\": \"uri\"},",
									"            },",
									"            \"required\": [\"self\", \"home\"]",
									"        },",
									"        \"meta\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"jwt\": {\"type\": \"string\"},",
									"                \"renew\": {\"type\": \"string\"}",
									"            },",
									"            \"required\": [\"jwt\", \"renew\"],",
									"        },",
									"    },",
									"    \"required\": [\"links\", \"meta\"],",
									"};",
									"var schemaBase = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {\"type\": \"string\", \"format\": \"uri\"},",
									"                \"home\": {\"type\": \"string\", \"format\": \"uri\"},",
									"            },",
									"            \"required\": [\"self\", \"home\"]",
									"        },",
									"        \"meta\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"resources\": {",
									"                    \"type\": \"object\"",
									"                }",
									"            },",
									"            \"required\": [\"resources\"]",
									"        }",
									"    },",
									"    \"required\": [\"links\",\"meta\"]",
									"};",
									"var schemaFull = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"data\": {",
									"            \"type\": \"array\",",
									"            \"properties\": {",
									"                \"id\": {\"type\": \"string\"},",
									"                \"type\": {\"type\": \"string\"},",
									"                \"attributes\": {\"type\": \"object\"},",
									"            },",
									"            \"required\": [\"id\", \"type\", \"attributes\"]",
									"        },",
									"        \"links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {\"type\": \"string\", \"format\": \"uri\"},",
									"                \"home\": {\"type\": \"string\", \"format\": \"uri\"},",
									"            },",
									"            \"required\": [\"self\", \"home\"]",
									"        },",
									"        \"meta\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"pagination\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"count\": {\"type\": \"number\"},",
									"                        \"page\": {\"type\": \"number\"},",
									"                        \"page_count\": {\"type\": \"number\"},",
									"                        \"page_items\": {\"type\": \"number\"},",
									"                        \"page_size\": {\"type\": \"number\"}",
									"                    },",
									"                    \"required\": [\"count\",\"page\",\"page_count\",\"page_items\",\"page_size\"]",
									"                }",
									"            },",
									"            \"required\": [\"pagination\"]",
									"        }",
									"    },",
									"    \"required\": [\"data\",\"links\",\"meta\"]",
									"};",
									"var schemaPatch = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {\"type\": \"string\", \"format\": \"uri\"},",
									"                \"home\": {\"type\": \"string\", \"format\": \"uri\"},",
									"            },",
									"            \"required\": [\"self\", \"home\"]",
									"        },",
									"        \"data\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"id\": {\"type\": \"string\"},",
									"                \"type\": {\"type\": \"string\"},",
									"                \"attributes\": {\"type\": \"object\"},",
									"            },",
									"            \"required\": [\"id\", \"type\", \"attributes\"],",
									"        },",
									"    },",
									"    \"required\": [\"links\", \"data\"],",
									"};",
									"postman.setEnvironmentVariable(\"schemaAuth\",schemaAuth);",
									"postman.setEnvironmentVariable(\"schemaBase\",schemaBase);",
									"postman.setEnvironmentVariable(\"schemaFull\",schemaFull);",
									"postman.setEnvironmentVariable(\"schemaPatch\",schemaPatch);",
									"var schema = postman.getEnvironmentVariable(\"schemaAuth\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody);",
									"    tests[\"Status code is 200\"] = responseCode.code === 200;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    }",
									"    postman.setEnvironmentVariable(\"jwt\", responseJSON.meta.jwt);",
									"    postman.setEnvironmentVariable(\"renew\", responseJSON.meta.renew);",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{username}}\",\n\t\"password\": \"{{password}}\"\n}"
						},
						"url": "{{be4Url}}/auth",
						"description": "Perform authentication using application/json content type"
					},
					"response": []
				},
				{
					"name": "Auth renew",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schemaAuth = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {\"type\": \"string\", \"format\": \"uri\"},",
									"                \"home\": {\"type\": \"string\", \"format\": \"uri\"},",
									"            },",
									"            \"required\": [\"self\", \"home\"]",
									"        },",
									"        \"meta\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"jwt\": {\"type\": \"string\"},",
									"                \"renew\": {\"type\": \"string\"}",
									"            },",
									"            \"required\": [\"jwt\", \"renew\"],",
									"        },",
									"    },",
									"    \"required\": [\"links\", \"meta\"],",
									"};",
									"var schemaBase = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {\"type\": \"string\", \"format\": \"uri\"},",
									"                \"home\": {\"type\": \"string\", \"format\": \"uri\"},",
									"            },",
									"            \"required\": [\"self\", \"home\"]",
									"        },",
									"        \"meta\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"resources\": {",
									"                    \"type\": \"object\"",
									"                }",
									"            },",
									"            \"required\": [\"resources\"]",
									"        }",
									"    },",
									"    \"required\": [\"links\",\"meta\"]",
									"};",
									"var schemaFull = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"data\": {",
									"            \"type\": \"array\",",
									"            \"properties\": {",
									"                \"id\": {\"type\": \"string\"},",
									"                \"type\": {\"type\": \"string\"},",
									"                \"attributes\": {\"type\": \"object\"},",
									"            },",
									"            \"required\": [\"id\", \"type\", \"attributes\"]",
									"        },",
									"        \"links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {\"type\": \"string\", \"format\": \"uri\"},",
									"                \"home\": {\"type\": \"string\", \"format\": \"uri\"},",
									"            },",
									"            \"required\": [\"self\", \"home\"]",
									"        },",
									"        \"meta\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"pagination\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"count\": {\"type\": \"number\"},",
									"                        \"page\": {\"type\": \"number\"},",
									"                        \"page_count\": {\"type\": \"number\"},",
									"                        \"page_items\": {\"type\": \"number\"},",
									"                        \"page_size\": {\"type\": \"number\"}",
									"                    },",
									"                    \"required\": [\"count\",\"page\",\"page_count\",\"page_items\",\"page_size\"]",
									"                }",
									"            },",
									"            \"required\": [\"pagination\"]",
									"        }",
									"    },",
									"    \"required\": [\"data\",\"links\",\"meta\"]",
									"};",
									"var schemaPatch = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"self\": {\"type\": \"string\", \"format\": \"uri\"},",
									"                \"home\": {\"type\": \"string\", \"format\": \"uri\"},",
									"            },",
									"            \"required\": [\"self\", \"home\"]",
									"        },",
									"        \"data\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"id\": {\"type\": \"string\"},",
									"                \"type\": {\"type\": \"string\"},",
									"                \"attributes\": {\"type\": \"object\"},",
									"            },",
									"            \"required\": [\"id\", \"type\", \"attributes\"],",
									"        },",
									"    },",
									"    \"required\": [\"links\", \"data\"],",
									"};",
									"postman.setEnvironmentVariable(\"schemaAuth\",schemaAuth);",
									"postman.setEnvironmentVariable(\"schemaBase\",schemaBase);",
									"postman.setEnvironmentVariable(\"schemaFull\",schemaFull);",
									"postman.setEnvironmentVariable(\"schemaPatch\",schemaPatch);",
									"var schema = postman.getEnvironmentVariable(\"schemaAuth\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody);",
									"    tests[\"Status code is 200\"] = responseCode.code === 200;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    }",
									"    postman.setEnvironmentVariable(\"jwt\", responseJSON.meta.jwt);",
									"    postman.setEnvironmentVariable(\"renew\", responseJSON.meta.renew);",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							},
							{
								"key": "Authorization",
								"value": "{{renew}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{username}}\",\n\t\"password\": \"{{password}}\"\n}"
						},
						"url": "{{be4Url}}/auth",
						"description": "Perform authentication using application/json content type"
					},
					"response": []
				},
				{
					"name": "Auth (form-data)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaAuth\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody);",
									"    tests[\"Status code is 200\"] = responseCode.code === 200;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    }",
									"    postman.setEnvironmentVariable(\"jwt\", responseJSON.meta.jwt);",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							]
						},
						"url": "{{be4Url}}/auth",
						"description": "Authentication using form-data"
					},
					"response": []
				},
				{
					"name": "Signup user",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaFull\");",
									"var responseJSON;",
									"try {",
									"    tests[\"Status code is 202\"] = responseCode.code === 202;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\").startsWith('application/json');",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    } else {",
									"        tests[\"Skip data validation\"] = true;",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"johannadoe\",\n    \"password\": \"j0h4nn4d0e\",\n    \"email\": \"johannadoe@nowhere.xx\",\n\t\"activation_url\": \"http://myactivationsys.xx?dum=my\",\n\t\"redirect_url\": \"app://xx?dum=my\"\n}"
						},
						"url": "{{be4Url}}/signup",
						"description": "Create new User"
					},
					"response": []
				},
				{
					"name": "Signup user activation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var uuid = postman.getEnvironmentVariable(\"uuid\");",
									"if (uuid) {",
									"    try {",
									"        tests[\"Status code is 204\"] = responseCode.code === 204;",
									"        tests[\"Body matches string\"] = responseBody === \"\";",
									"    ",
									"    } catch (e) {",
									"        tests[\"Error in parsing response\"] = e;",
									"    }",
									"} else {",
									"    tests[\"Skip test - empty apiKey|uuid\"] = true;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"uuid\": \"{{uuid}}\"\n}"
						},
						"url": "{{be4Url}}/signup/activation",
						"description": "Signup user activation"
					},
					"response": []
				},
				{
					"name": "Credentials change request",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var profileEmail = postman.getEnvironmentVariable(\"profileEmail\");",
									"if (profileEmail) {",
									"    var responseJSON;",
									"    try {",
									"    ",
									"        tests[\"Status code is 204\"] = responseCode.code === 204;",
									"        tests[\"Body matches string\"] = responseBody === \"\";",
									"        ",
									"    } catch (e) {",
									"        tests[\"Error in parsing response\"] = e;",
									"    }",
									"} else {",
									"    tests[\"Skip test - empty profileEmail\"] = true;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"contact\": \"{{profileEmail}}\",\n\t\"change_url\": \"http://example.com/change\"\n}"
						},
						"url": "{{be4Url}}/auth/change",
						"description": "Perform authentication using application/json content type"
					},
					"response": []
				},
				{
					"name": "Credentials change",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var uuid = postman.getEnvironmentVariable(\"uuid\");",
									"if (uuid) {",
									"    var schema = postman.getEnvironmentVariable(\"schemaAuth\");",
									"    var responseJSON;",
									"    try {",
									"        responseJSON = JSON.parse(responseBody);",
									"        tests[\"Status code is 200\"] = responseCode.code === 200;",
									"        tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"        if (schema) {",
									"            tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"        }",
									"        postman.setEnvironmentVariable(\"jwt\", responseJSON.meta.jwt);",
									"    } catch (e) {",
									"        tests[\"Error in parsing response\"] = e;",
									"    }",
									"} else {",
									"    tests[\"Skip test - empty apiKey|uuid\"] = true;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{uuid}}\",\n    \"password\": \"a-brand-new password\",\n    \"login\": true\n}"
						},
						"url": "{{be4Url}}/auth/change",
						"description": "Perform actual credential change using secret hash"
					},
					"response": []
				},
				{
					"name": "GET Auth user data",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaBase\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    if (responseCode.code === 200) {",
									"        tests[\"Status equals 200\"] = true;",
									"        tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"        if (schema) {",
									"            tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"        } else {",
									"            tests[\"Skip data validation\"] = true;",
									"        }",
									"    } else if (responseCode.code === 404) {",
									"        tests[\"Status code is 404\"] = true;",
									"        tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/auth/user"
					},
					"response": []
				},
				{
					"name": "Modify auth user data",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaPatch\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 200\"] = responseCode.code === 200;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    } else {",
									"        tests[\"Skip data validation\"] = true;",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Gustavo\"\n}"
						},
						"url": "{{be4Url}}/auth/user"
					},
					"response": []
				}
			]
		},
		{
			"name": "2. Home & Status",
			"item": [
				{
					"name": "GET home",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaBase\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 200\"] = responseCode.code === 200;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    } else {",
									"        tests[\"Skip data validation\"] = true;",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/home",
						"description": "Home endpoint"
					},
					"response": []
				},
				{
					"name": "GET status",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaBase\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 200\"] = responseCode.code === 200;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    } else {",
									"        tests[\"Skip data validation\"] = true;",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/status/",
						"description": "Status endpoint"
					},
					"response": []
				}
			]
		},
		{
			"name": "3. Model",
			"item": [
				{
					"name": "3.1 Object Types",
					"description": "",
					"item": [
						{
							"name": "GET object_types",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var schema = postman.getEnvironmentVariable(\"schemaFull\");",
											"var responseJSON;",
											"try {",
											"    responseJSON = JSON.parse(responseBody);",
											"    tests[\"Status code is 200\"] = responseCode.code === 200;",
											"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
											"    if (schema) {",
											"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
											"    } else {",
											"        tests[\"Skip data validation\"] = true;",
											"    }",
											"} catch (e) {",
											"    tests[\"Error in parsing response\"] = e;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt}}"
									},
									{
										"key": "X-Api-Key",
										"value": "{{apiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "{{be4Url}}/model/object_types",
								"description": "GET object_types"
							},
							"response": []
						},
						{
							"name": "Create object_type",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var schema = postman.getEnvironmentVariable(\"schemaPatch\");",
											"var responseJSON;",
											"try {",
											"    responseJSON = JSON.parse(responseBody); ",
											"    tests[\"Status code is 201\"] = responseCode.code === 201;",
											"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
											"    if (schema) {",
											"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
											"    } else {",
											"        tests[\"Skip data validation\"] = true;",
											"    }",
											"    if (responseCode.code === 201) {",
											"        postman.setEnvironmentVariable(\"objectTypeId\", responseJSON.data.id);",
											"        postman.setEnvironmentVariable(\"objectTypeName\", responseJSON.data.attributes.name);",
											"    }",
											"} catch (e) {",
											"    tests[\"Error in parsing response\"] = e;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt}}"
									},
									{
										"key": "X-Api-Key",
										"value": "{{apiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"object_types\",\n        \"attributes\": {\n            \"name\": \"cats\",\n            \"singular\": \"cat\",\n            \"description\": \"This is a cat\",\n            \"table\": \"BEdita/Core.Objects\",\n            \"parent_name\": \"objects\",\n            \"is_abstract\": false\n        }\n    }\n}"
								},
								"url": "{{be4Url}}/model/object_types",
								"description": "POST ADD object_types"
							},
							"response": []
						},
						{
							"name": "GET single object_type",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var schema = postman.getEnvironmentVariable(\"schemaBase\");",
											"var responseJSON;",
											"try {",
											"    responseJSON = JSON.parse(responseBody); ",
											"    if (responseCode.code === 200) {",
											"        tests[\"Status equals 200\"] = true;",
											"        tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
											"        if (schema) {",
											"            tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
											"        } else {",
											"            tests[\"Skip data validation\"] = true;",
											"        }",
											"    } else if (responseCode.code === 404) {",
											"        tests[\"Status code is 404\"] = true;",
											"        tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
											"    }",
											"} catch (e) {",
											"    tests[\"Error in parsing response\"] = e;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt}}"
									},
									{
										"key": "X-Api-Key",
										"value": "{{apiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "{{be4Url}}/model/object_types/{{objectTypeName}}",
								"description": "GET object_type by object_type_id"
							},
							"response": []
						},
						{
							"name": "Modify object_type",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var schema = postman.getEnvironmentVariable(\"schemaPatch\");",
											"var responseJSON;",
											"try {",
											"    responseJSON = JSON.parse(responseBody); ",
											"    tests[\"Status code is 200\"] = responseCode.code === 200;",
											"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
											"    if (schema) {",
											"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
											"    } else {",
											"        tests[\"Skip data validation\"] = true;",
											"    }",
											"} catch (e) {",
											"    tests[\"Error in parsing response\"] = e;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt}}"
									},
									{
										"key": "X-Api-Key",
										"value": "{{apiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"id\": \"{{objectTypeId}}\",\n        \"type\": \"object_types\",\n        \"attributes\": {\n            \"description\": \"another dummy description\"\n        }\n    }\n}"
								},
								"url": "{{be4Url}}/model/object_types/{{objectTypeId}}",
								"description": "PATCH object_type"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "3.2 Property Types",
					"description": "",
					"item": [
						{
							"name": "GET property types",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var schema = postman.getEnvironmentVariable(\"schemaFull\");",
											"var responseJSON;",
											"try {",
											"    responseJSON = JSON.parse(responseBody);",
											"    tests[\"Status code is 200\"] = responseCode.code === 200;",
											"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
											"    if (schema) {",
											"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
											"    } else {",
											"        tests[\"Skip data validation\"] = true;",
											"    }",
											"} catch (e) {",
											"    tests[\"Error in parsing response\"] = e;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt}}"
									},
									{
										"key": "X-Api-Key",
										"value": "{{apiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "{{be4Url}}/model/property_types",
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "3.3 Properties",
					"description": "",
					"item": [
						{
							"name": "Create property",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var schema = postman.getEnvironmentVariable(\"schemaPatch\");",
											"var responseJSON;",
											"try {",
											"    responseJSON = JSON.parse(responseBody); ",
											"    tests[\"Status code is 201\"] = responseCode.code === 201;",
											"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
											"    if (schema) {",
											"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
											"    } else {",
											"        tests[\"Skip data validation\"] = true;",
											"    }",
											"    if (responseCode.code === 201) {",
											"        postman.setEnvironmentVariable(\"propertyId\", responseJSON.data.id);",
											"    }",
											"} catch (e) {",
											"    tests[\"Error in parsing response\"] = e;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt}}"
									},
									{
										"key": "X-Api-Key",
										"value": "{{apiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"properties\",\n        \"attributes\": {\n\t\t\t\"name\":\"nickname\",\n\t\t\t\"description\":\"Profile nickname\",\n\t\t\t\"property_type_name\":\"string\",\n\t\t\t\"object_type_name\":\"profiles\"\n        }\n    }\n}"
								},
								"url": "{{be4Url}}/model/properties",
								"description": ""
							},
							"response": []
						},
						{
							"name": "GET single property",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var schema = postman.getEnvironmentVariable(\"schemaBase\");",
											"var responseJSON;",
											"try {",
											"    responseJSON = JSON.parse(responseBody); ",
											"    if (responseCode.code === 200) {",
											"        tests[\"Status equals 200\"] = true;",
											"        tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
											"        if (schema) {",
											"            tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
											"        } else {",
											"            tests[\"Skip data validation\"] = true;",
											"        }",
											"    } else if (responseCode.code === 404) {",
											"        tests[\"Status code is 404\"] = true;",
											"        tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
											"    }",
											"} catch (e) {",
											"    tests[\"Error in parsing response\"] = e;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt}}"
									},
									{
										"key": "X-Api-Key",
										"value": "{{apiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "{{be4Url}}/model/properties/{{propertyId}}",
								"description": "GET object_type by object_type_id"
							},
							"response": []
						},
						{
							"name": "GET properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var schema = postman.getEnvironmentVariable(\"schemaFull\");",
											"var responseJSON;",
											"try {",
											"    responseJSON = JSON.parse(responseBody);",
											"    tests[\"Status code is 200\"] = responseCode.code === 200;",
											"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
											"    if (schema) {",
											"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
											"    } else {",
											"        tests[\"Skip data validation\"] = true;",
											"    }",
											"} catch (e) {",
											"    tests[\"Error in parsing response\"] = e;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt}}"
									},
									{
										"key": "X-Api-Key",
										"value": "{{apiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "{{be4Url}}/model/properties",
								"description": ""
							},
							"response": []
						},
						{
							"name": "GET properties + filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var schema = postman.getEnvironmentVariable(\"schemaFull\");",
											"var responseJSON;",
											"try {",
											"    responseJSON = JSON.parse(responseBody);",
											"    tests[\"Status code is 200\"] = responseCode.code === 200;",
											"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
											"    if (schema) {",
											"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
											"    } else {",
											"        tests[\"Skip data validation\"] = true;",
											"    }",
											"} catch (e) {",
											"    tests[\"Error in parsing response\"] = e;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt}}"
									},
									{
										"key": "X-Api-Key",
										"value": "{{apiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{be4Url}}/model/properties?filter[object_type]=profiles&filter[type]=dynamic",
									"host": [
										"{{be4Url}}"
									],
									"path": [
										"model",
										"properties"
									],
									"query": [
										{
											"key": "filter[object_type]",
											"value": "profiles",
											"equals": true
										},
										{
											"key": "filter[type]",
											"value": "dynamic",
											"equals": true
										}
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Modify property",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var schema = postman.getEnvironmentVariable(\"schemaPatch\");",
											"var responseJSON;",
											"try {",
											"    responseJSON = JSON.parse(responseBody); ",
											"    tests[\"Status code is 200\"] = responseCode.code === 200;",
											"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
											"    if (schema) {",
											"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
											"    } else {",
											"        tests[\"Skip data validation\"] = true;",
											"    }",
											"} catch (e) {",
											"    tests[\"Error in parsing response\"] = e;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt}}"
									},
									{
										"key": "X-Api-Key",
										"value": "{{apiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"id\": \"{{propertyId}}\",\n        \"type\": \"properties\",\n        \"attributes\": {\n\t\t\t\"name\":\"nickname\",\n            \"description\": \"This is a new description\"\n        }\n    }\n}"
								},
								"url": "{{be4Url}}/model/properties/{{propertyId}}",
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "3.4 Relations",
					"description": "relations endpoint",
					"item": [
						{
							"name": "GET relations",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var schema = postman.getEnvironmentVariable(\"schemaFull\");",
											"var responseJSON;",
											"try {",
											"    responseJSON = JSON.parse(responseBody);",
											"    tests[\"Status code is 200\"] = responseCode.code === 200;",
											"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
											"    if (schema) {",
											"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
											"    } else {",
											"        tests[\"Skip data validation\"] = true;",
											"    }",
											"} catch (e) {",
											"    tests[\"Error in parsing response\"] = e;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt}}"
									},
									{
										"key": "X-Api-Key",
										"value": "{{apiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "{{be4Url}}/model/relations",
								"description": "GET relations"
							},
							"response": []
						},
						{
							"name": "Create relation",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var schema = postman.getEnvironmentVariable(\"schemaPatch\");",
											"var responseJSON;",
											"try {",
											"    responseJSON = JSON.parse(responseBody); ",
											"    tests[\"Status code is 201\"] = responseCode.code === 201;",
											"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
											"    if (schema) {",
											"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
											"    } else {",
											"        tests[\"Skip data validation\"] = true;",
											"    }",
											"    if (responseCode.code === 201) {",
											"        postman.setEnvironmentVariable(\"relationId\", responseJSON.data.id);",
											"        postman.setEnvironmentVariable(\"relationName\", responseJSON.data.attributes.name);",
											"        postman.setEnvironmentVariable(\"inverseRelationName\", responseJSON.data.attributes.inverse_name);",
											"    }",
											"} catch (e) {",
											"    tests[\"Error in parsing response\"] = e;",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt}}"
									},
									{
										"key": "X-Api-Key",
										"value": "{{apiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"relations\",\n        \"attributes\": {\n            \"name\": \"owner_of\",\n            \"label\": \"Owner of\",\n            \"inverse_name\": \"belongs_to\",\n            \"inverse_label\": \"Belongs to\",\n            \"description\": \"Cat owner relation\",\n            \"params\": {\n            }\n        }\n    }\n}"
								},
								"url": "{{be4Url}}/model/relations",
								"description": "POST ADD relation"
							},
							"response": []
						},
						{
							"name": "GET single relation",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var schema = postman.getEnvironmentVariable(\"schemaFull\");",
											"var responseJSON;",
											"try {",
											"    responseJSON = JSON.parse(responseBody);",
											"    tests[\"Status code is 200\"] = responseCode.code === 200;",
											"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
											"    if (schema) {",
											"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
											"    } else {",
											"        tests[\"Skip data validation\"] = true;",
											"    }",
											"} catch (e) {",
											"    tests[\"Error in parsing response\"] = e;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt}}"
									},
									{
										"key": "X-Api-Key",
										"value": "{{apiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "{{be4Url}}/model/relations/{{relationId}}",
								"description": "GET single relation by relation id"
							},
							"response": []
						},
						{
							"name": "Modify relation",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var schema = postman.getEnvironmentVariable(\"schemaPatch\");",
											"var responseJSON;",
											"try {",
											"    responseJSON = JSON.parse(responseBody); ",
											"    tests[\"Status code is 200\"] = responseCode.code === 200;",
											"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
											"    if (schema) {",
											"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
											"    } else {",
											"        tests[\"Skip data validation\"] = true;",
											"    }",
											"    if (responseCode.code === 201) {",
											"        postman.setEnvironmentVariable(\"relationId\", responseJSON.data.id);",
											"    }",
											"} catch (e) {",
											"    tests[\"Error in parsing response\"] = e;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt}}"
									},
									{
										"key": "X-Api-Key",
										"value": "{{apiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n    \t\"id\": \"{{relationId}}\",\n        \"type\": \"relations\",\n        \"attributes\": {\n            \"label\": \"Shared with\"\n        }\n    }\n}"
								},
								"url": "{{be4Url}}/model/relations/{{relationId}}",
								"description": "PATCH relation"
							},
							"response": []
						},
						{
							"name": "Add object types on left side of relation",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var schema = postman.getEnvironmentVariable(\"schemaPatch\");",
											"var responseJSON;",
											"try {",
											"    responseJSON = JSON.parse(responseBody); ",
											"    tests[\"Status code is 200\"] = responseCode.code === 200;",
											"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
											"    if (schema) {",
											"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
											"    } else {",
											"        tests[\"Skip data validation\"] = true;",
											"    }",
											"} catch (e) {",
											"    tests[\"Error in parsing response\"] = e;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt}}"
									},
									{
										"key": "X-Api-Key",
										"value": "{{apiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": [\n\t    {\n\t        \"type\": \"object_types\",\n\t\t    \"id\": \"3\"\n\t    },\n\t    {\n\t        \"type\": \"object_types\",\n\t\t    \"id\": \"2\"\n\t    }\n\t]\n}"
								},
								"url": "{{be4Url}}/model/relations/{{relationId}}/relationships/left_object_types",
								"description": "Add a list of object types on left side of relation"
							},
							"response": []
						},
						{
							"name": "GET left object types of relation",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var schema = postman.getEnvironmentVariable(\"schemaFull\");",
											"var responseJSON;",
											"try {",
											"    responseJSON = JSON.parse(responseBody);",
											"    tests[\"Status code is 200\"] = responseCode.code === 200;",
											"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
											"    if (schema) {",
											"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
											"    } else {",
											"        tests[\"Skip data validation\"] = true;",
											"    }",
											"} catch (e) {",
											"    tests[\"Error in parsing response\"] = e;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt}}"
									},
									{
										"key": "X-Api-Key",
										"value": "{{apiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "{{be4Url}}/model/relations/{{relationId}}/left_object_types",
								"description": "GET object types on the left of relation"
							},
							"response": []
						},
						{
							"name": "Add an object type on right side of relation",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var schema = postman.getEnvironmentVariable(\"schemaPatch\");",
											"var responseJSON;",
											"try {",
											"    responseJSON = JSON.parse(responseBody); ",
											"    tests[\"Status code is 200\"] = responseCode.code === 200;",
											"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
											"    if (schema) {",
											"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
											"    } else {",
											"        tests[\"Skip data validation\"] = true;",
											"    }",
											"} catch (e) {",
											"    tests[\"Error in parsing response\"] = e;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt}}"
									},
									{
										"key": "X-Api-Key",
										"value": "{{apiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"object_types\",\n\t    \"id\": \"3\"\n    }\n}"
								},
								"url": "{{be4Url}}/model/relations/{{relationId}}/relationships/right_object_types",
								"description": "Add one object type on right side of relation"
							},
							"response": []
						},
						{
							"name": "GET right object types of relation",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var schema = postman.getEnvironmentVariable(\"schemaFull\");",
											"var responseJSON;",
											"try {",
											"    responseJSON = JSON.parse(responseBody);",
											"    tests[\"Status code is 200\"] = responseCode.code === 200;",
											"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
											"    if (schema) {",
											"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
											"    } else {",
											"        tests[\"Skip data validation\"] = true;",
											"    }",
											"} catch (e) {",
											"    tests[\"Error in parsing response\"] = e;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt}}"
									},
									{
										"key": "X-Api-Key",
										"value": "{{apiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "{{be4Url}}/model/relations/{{relationId}}/right_object_types",
								"description": "GET object types on the right of relation"
							},
							"response": []
						},
						{
							"name": "Replace object types on right side",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var schema = postman.getEnvironmentVariable(\"schemaPatch\");",
											"var responseJSON;",
											"try {",
											"    responseJSON = JSON.parse(responseBody); ",
											"    tests[\"Status code is 200\"] = responseCode.code === 200;",
											"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
											"    if (schema) {",
											"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
											"    } else {",
											"        tests[\"Skip data validation\"] = true;",
											"    }",
											"} catch (e) {",
											"    tests[\"Error in parsing response\"] = e;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt}}"
									},
									{
										"key": "X-Api-Key",
										"value": "{{apiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": [\n    \t{\n        \t\"type\": \"object_types\",\n\t    \t\"id\": \"{{objectTypeId}}\"\n    \t}\n    ]\n}"
								},
								"url": "{{be4Url}}/model/relations/{{relationId}}/relationships/right_object_types",
								"description": "Replace object types on left side of relation"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "3.5 Schema",
					"description": "",
					"item": [
						{
							"name": "GET object_type schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var schema = postman.getEnvironmentVariable(\"schemaBase\");",
											"var responseJSON;",
											"try {",
											"    responseJSON = JSON.parse(responseBody); ",
											"    if (responseCode.code === 200) {",
											"        tests[\"Status equals 200\"] = true;",
											"        tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/schema+json';",
											"        if (schema) {",
											"            tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
											"        } else {",
											"            tests[\"Skip data validation\"] = true;",
											"        }",
											"    } else if (responseCode.code === 404) {",
											"        tests[\"Status code is 404\"] = true;",
											"        tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
											"    }",
											"} catch (e) {",
											"    tests[\"Error in parsing response\"] = e;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/schema+json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt}}"
									},
									{
										"key": "X-Api-Key",
										"value": "{{apiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "{{be4Url}}/model/schema/{{objectTypeName}}",
								"description": ""
							},
							"response": []
						},
						{
							"name": "GET resource schema (roles)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var schema = postman.getEnvironmentVariable(\"schemaBase\");",
											"var responseJSON;",
											"try {",
											"    responseJSON = JSON.parse(responseBody); ",
											"    if (responseCode.code === 200) {",
											"        tests[\"Status equals 200\"] = true;",
											"        tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/schema+json';",
											"        if (schema) {",
											"            tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
											"        } else {",
											"            tests[\"Skip data validation\"] = true;",
											"        }",
											"    } else if (responseCode.code === 404) {",
											"        tests[\"Status code is 404\"] = true;",
											"        tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
											"    }",
											"} catch (e) {",
											"    tests[\"Error in parsing response\"] = e;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/schema+json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt}}"
									},
									{
										"key": "X-Api-Key",
										"value": "{{apiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "{{be4Url}}/model/schema/roles",
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "4. Objects",
			"description": "objects endpoint: Object management",
			"item": [
				{
					"name": "GET objects",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaFull\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 200\"] = responseCode.code === 200;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    } else {",
									"        tests[\"Skip data validation\"] = true;",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/objects/",
						"description": "Get objects list"
					},
					"response": []
				},
				{
					"name": "Create object",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaPatch\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 201\"] = responseCode.code === 201;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    } else {",
									"        tests[\"Skip data validation\"] = true;",
									"    }",
									"    postman.setEnvironmentVariable(\"objectId\", responseJSON.data.id);",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"{{objectTypeName}}\",\n        \"attributes\": {\n            \"description\": \"a cat\"\n        }\n    }\n}"
						},
						"url": "{{be4Url}}/{{objectTypeName}}",
						"description": "Create new Object"
					},
					"response": []
				},
				{
					"name": "GET single object",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaBase\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    if (responseCode.code === 200) {",
									"        tests[\"Status equals 200\"] = true;",
									"        tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"        if (schema) {",
									"            tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"        } else {",
									"            tests[\"Skip data validation\"] = true;",
									"        }",
									"    } else if (responseCode.code === 404) {",
									"        tests[\"Status code is 404\"] = true;",
									"        tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/{{objectTypeName}}/{{objectId}}",
						"description": "get single object by id"
					},
					"response": []
				},
				{
					"name": "Modify object",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaPatch\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 200\"] = responseCode.code === 200;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    } else {",
									"        tests[\"Skip data validation\"] = true;",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"id\": \"{{objectId}}\",\n        \"type\": \"{{objectTypeName}}\",\n        \"attributes\": {\n            \"description\": \"Superdummy\"\n        }\n    }\n}"
						},
						"url": "{{be4Url}}/{{objectTypeName}}/{{objectId}}",
						"description": "PATCH object"
					},
					"response": []
				},
				{
					"name": "GET objects type filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaFull\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 200\"] = responseCode.code === 200;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    } else {",
									"        tests[\"Skip data validation\"] = true;",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{be4Url}}/objects?filter[type]=documents",
							"host": [
								"{{be4Url}}"
							],
							"path": [
								"objects"
							],
							"query": [
								{
									"key": "filter[type]",
									"value": "documents",
									"equals": true
								}
							]
						},
						"description": "Get objects list"
					},
					"response": []
				},
				{
					"name": "Create object relation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaPatch\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 200\"] = responseCode.code === 200;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    } else {",
									"        tests[\"Skip data validation\"] = true;",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n    \t{\n        \t\"type\": \"{{objectTypeName}}\",\n        \t\"id\": \"{{objectId}}\"\n    \t}\n    ]\n}"
						},
						"url": "{{be4Url}}/users/1/relationships/{{relationName}}",
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET related objects",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaFull\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 200\"] = responseCode.code === 200;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    } else {",
									"        tests[\"Skip data validation\"] = true;",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/{{objectTypeName}}/{{objectId}}/{{inverseRelationName}}",
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "5. Users & Roles",
			"description": "Roles management",
			"item": [
				{
					"name": "GET users",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaFull\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 200\"] = responseCode.code === 200;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    } else {",
									"        tests[\"Skip data validation\"] = true;",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/users/",
						"description": "Get users list"
					},
					"response": []
				},
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaPatch\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 201\"] = responseCode.code === 201;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    } else {",
									"        tests[\"Skip data validation\"] = true;",
									"    }",
									"    postman.setEnvironmentVariable(\"userId\", responseJSON.data.id);",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"users\",\n        \"attributes\": {\n            \"username\": \"johndoe\",\n            \"password\": \"j04nd0e\",\n            \"uname\": \"johndoe\"\n        }\n    }\n}"
						},
						"url": "{{be4Url}}/users",
						"description": "Create new User"
					},
					"response": []
				},
				{
					"name": "GET single user",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaBase\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    if (responseCode.code === 200) {",
									"        tests[\"Status equals 200\"] = true;",
									"        tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"        if (schema) {",
									"            tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"        } else {",
									"            tests[\"Skip data validation\"] = true;",
									"        }",
									"    } else if (responseCode.code === 404) {",
									"        tests[\"Status code is 404\"] = true;",
									"        tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/users/{{userId}}",
						"description": "get single user by id"
					},
					"response": []
				},
				{
					"name": "Patch user",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaPatch\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 200\"] = responseCode.code === 200;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    } else {",
									"        tests[\"Skip data validation\"] = true;",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"id\": \"{{userId}}\",\n        \"type\": \"users\",\n        \"attributes\": {\n            \"name\": \"John\"\n        }\n    }\n}"
						},
						"url": "{{be4Url}}/users/{{userId}}",
						"description": "PATCH user"
					},
					"response": []
				},
				{
					"name": "GET roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaFull\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody);",
									"    tests[\"Status code is 200\"] = responseCode.code === 200;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    } else {",
									"        tests[\"Skip data validation\"] = true;",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/roles/",
						"description": "Get roles list"
					},
					"response": []
				},
				{
					"name": "Create role",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaPatch\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 201\"] = responseCode.code === 201;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    } else {",
									"        tests[\"Skip data validation\"] = true;",
									"    }",
									"    if (responseCode.code === 201) {",
									"        postman.setEnvironmentVariable(\"roleId\", responseJSON.data.id);",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"roles\",\n        \"attributes\": {\n            \"name\": \"animal\"\n        }\n    }\n}"
						},
						"url": "{{be4Url}}/roles",
						"description": "Create new Role"
					},
					"response": []
				},
				{
					"name": "GET single role",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaBase\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    if (responseCode.code === 200) {",
									"        tests[\"Status equals 200\"] = true;",
									"        tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"        if (schema) {",
									"            tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"        } else {",
									"            tests[\"Skip data validation\"] = true;",
									"        }",
									"    } else if (responseCode.code === 404) {",
									"        tests[\"Status code is 404\"] = true;",
									"        tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/roles/{{roleId}}",
						"description": "get single role by id"
					},
					"response": []
				},
				{
					"name": "Modify role",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaPatch\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 200\"] = responseCode.code === 200;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    } else {",
									"        tests[\"Skip data validation\"] = true;",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"id\": \"{{roleId}}\",\n        \"type\": \"roles\",\n        \"attributes\": {\n        \t\"name\": \"animal\",\n            \"description\": \"a very important description of this role\"\n        }\n    }\n}"
						},
						"url": "{{be4Url}}/roles/{{roleId}}",
						"description": "PATCH role"
					},
					"response": []
				},
				{
					"name": "Add role to user",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaPatch\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 200\"] = responseCode.code === 200;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    } else {",
									"        tests[\"Skip data validation\"] = true;",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"roles\",\n\t    \"id\": \"{{roleId}}\"\n    }\n}"
						},
						"url": "{{be4Url}}/users/{{userId}}/relationships/roles",
						"description": "Add a role to user"
					},
					"response": []
				},
				{
					"name": "GET user roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaFull\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 200\"] = responseCode.code === 200;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    } else {",
									"        tests[\"Skip data validation\"] = true;",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/users/{{userId}}/roles",
						"description": "Get user roles"
					},
					"response": []
				},
				{
					"name": "Add user to role",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									"tests[\"Body is empty\"] = responseBody === \"\";",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"users\",\n\t    \"id\": \"{{userId}}\"\n    }\n}"
						},
						"url": "{{be4Url}}/roles/{{roleId}}/relationships/users",
						"description": "Add a user to a role"
					},
					"response": []
				},
				{
					"name": "GET role users",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaFull\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 200\"] = responseCode.code === 200;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    } else {",
									"        tests[\"Skip data validation\"] = true;",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/roles/{{roleId}}/users",
						"description": "Get role users"
					},
					"response": []
				},
				{
					"name": "Remove associated role",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 200\"] = responseCode.code === 200;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"roles\",\n\t    \"id\": \"{{roleId}}\"\n    }\n}"
						},
						"url": "{{be4Url}}/users/{{userId}}/relationships/roles",
						"description": "Remove a user's role"
					},
					"response": []
				}
			]
		},
		{
			"name": "6. Trash",
			"description": "Trash management",
			"item": [
				{
					"name": "GET objects",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaFull\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 200\"] = responseCode.code === 200;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    } else {",
									"        tests[\"Skip data validation\"] = true;",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/trash/",
						"description": "Get objects from trash"
					},
					"response": []
				},
				{
					"name": "Delete object",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 204\"] = responseCode.code === 204;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    tests[\"Body matches string\"] = responseBody === \"\";",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/objects/{{objectId}}",
						"description": "DEL object"
					},
					"response": []
				},
				{
					"name": "GET single object",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaBase\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    if (responseCode.code === 200) {",
									"        tests[\"Status equals 200\"] = true;",
									"        tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"        if (schema) {",
									"            tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"        } else {",
									"            tests[\"Skip data validation\"] = true;",
									"        }",
									"    } else if (responseCode.code === 404) {",
									"        tests[\"Status code is 404\"] = true;",
									"        tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/trash/{{objectId}}",
						"description": "get single object from trash by id"
					},
					"response": []
				},
				{
					"name": "Restore object",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 204\"] = responseCode.code === 204;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    tests[\"Body matches string\"] = responseBody === \"\";",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"id\": \"{{objectId}}\",\n        \"type\": \"objects\"\n    }\n}"
						},
						"url": "{{be4Url}}/trash/{{objectId}}",
						"description": "PATCH restore object"
					},
					"response": []
				}
			]
		},
		{
			"name": "7. Admin",
			"item": [
				{
					"name": "Create application",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaPatch\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 201\"] = responseCode.code === 201;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    } else {",
									"        tests[\"Skip data validation\"] = true;",
									"    }",
									"    postman.setEnvironmentVariable(\"adminResourceId\", responseJSON.data.id);",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"applications\",\n        \"attributes\": {\n            \"name\": \"my-very-first-app\",\n            \"description\": \"My first app\"\n        }\n    }\n}"
						},
						"url": "{{be4Url}}/admin/applications"
					},
					"response": []
				},
				{
					"name": "GET single application",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaBase\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    if (responseCode.code === 200) {",
									"        tests[\"Status equals 200\"] = true;",
									"        tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"        if (schema) {",
									"            tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"        } else {",
									"            tests[\"Skip data validation\"] = true;",
									"        }",
									"    } else if (responseCode.code === 404) {",
									"        tests[\"Status code is 404\"] = true;",
									"        tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/admin/applications/{{adminResourceId}}"
					},
					"response": []
				},
				{
					"name": "GET applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaFull\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 200\"] = responseCode.code === 200;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    } else {",
									"        tests[\"Skip data validation\"] = true;",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/admin/applications"
					},
					"response": []
				},
				{
					"name": "Modify application",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaPatch\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 200\"] = responseCode.code === 200;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    } else {",
									"        tests[\"Skip data validation\"] = true;",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"id\": \"{{adminResourceId}}\",\n        \"type\": \"applications\",\n        \"attributes\": {\n            \"name\": \"new-app-name\",\n            \"description\": \"New application description\"\n        }\n    }\n}"
						},
						"url": "{{be4Url}}/admin/applications/{{adminResourceId}}"
					},
					"response": []
				},
				{
					"name": "Delete application",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 204\"] = responseCode.code === 204;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    tests[\"Body matches string\"] = responseBody === \"\";",
									"    if (postman.getEnvironmentVariable(\"roleId\")) {",
									"        postman.clearEnvironmentVariable(\"roleId\");",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/admin/applications/{{adminResourceId}}"
					},
					"response": []
				},
				{
					"name": "Create async job",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaPatch\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 201\"] = responseCode.code === 201;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    } else {",
									"        tests[\"Skip data validation\"] = true;",
									"    }",
									"    postman.setEnvironmentVariable(\"adminResourceId\", responseJSON.data.id);",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"async_jobs\",\n        \"attributes\": {\n            \"service\": \"dummy\"\n        }\n    }\n}"
						},
						"url": "{{be4Url}}/admin/async_jobs"
					},
					"response": []
				},
				{
					"name": "GET single job",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaBase\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    if (responseCode.code === 200) {",
									"        tests[\"Status equals 200\"] = true;",
									"        tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"        if (schema) {",
									"            tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"        } else {",
									"            tests[\"Skip data validation\"] = true;",
									"        }",
									"    } else if (responseCode.code === 404) {",
									"        tests[\"Status code is 404\"] = true;",
									"        tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/admin/async_jobs/{{adminResourceId}}"
					},
					"response": []
				},
				{
					"name": "GET async jobs list",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaFull\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 200\"] = responseCode.code === 200;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    } else {",
									"        tests[\"Skip data validation\"] = true;",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/admin/async_jobs"
					},
					"response": []
				},
				{
					"name": "Modify async job",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaPatch\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 200\"] = responseCode.code === 200;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    } else {",
									"        tests[\"Skip data validation\"] = true;",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"id\": \"{{adminResourceId}}\",\n        \"type\": \"async_jobs\",\n        \"attributes\": {\n            \"priority\": 2\n        }\n    }\n}"
						},
						"url": "{{be4Url}}/admin/async_jobs/{{adminResourceId}}"
					},
					"response": []
				},
				{
					"name": "Delete async job",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 204\"] = responseCode.code === 204;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    tests[\"Body matches string\"] = responseBody === \"\";",
									"    if (postman.getEnvironmentVariable(\"jobId\")) {",
									"        postman.clearEnvironmentVariable(\"jobId\");",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/admin/async_jobs/{{adminResourceId}}"
					},
					"response": []
				},
				{
					"name": "Create config",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaPatch\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 201\"] = responseCode.code === 201;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    } else {",
									"        tests[\"Skip data validation\"] = true;",
									"    }",
									"    postman.setEnvironmentVariable(\"adminResourceId\", responseJSON.data.id);",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n    \t\"id\": \"TestConf\",\n        \"type\": \"config\",\n        \"attributes\": {\n\t\t\t\"name\": \"TestConf\",\n            \"content\": \"config content\",\n            \"context\": \"config-context\"\n        }\n    }\n}"
						},
						"url": "{{be4Url}}/admin/config"
					},
					"response": []
				},
				{
					"name": "GET single config",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaBase\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    if (responseCode.code === 200) {",
									"        tests[\"Status equals 200\"] = true;",
									"        tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"        if (schema) {",
									"            tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"        } else {",
									"            tests[\"Skip data validation\"] = true;",
									"        }",
									"    } else if (responseCode.code === 404) {",
									"        tests[\"Status code is 404\"] = true;",
									"        tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/admin/config/{{adminResourceId}}"
					},
					"response": []
				},
				{
					"name": "GET config list",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaFull\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 200\"] = responseCode.code === 200;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    } else {",
									"        tests[\"Skip data validation\"] = true;",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/admin/config"
					},
					"response": []
				},
				{
					"name": "Modify config",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaPatch\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 200\"] = responseCode.code === 200;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    } else {",
									"        tests[\"Skip data validation\"] = true;",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"id\": \"{{adminResourceId}}\",\n        \"type\": \"config\",\n        \"attributes\": {\n            \"context\": \"another-context\"\n        }\n    }\n}"
						},
						"url": "{{be4Url}}/admin/config/{{adminResourceId}}"
					},
					"response": []
				},
				{
					"name": "Delete config",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									"tests[\"Body matches string\"] = responseBody === \"\";",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/admin/config/{{adminResourceId}}"
					},
					"response": []
				},
				{
					"name": "Create endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaPatch\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 201\"] = responseCode.code === 201;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    } else {",
									"        tests[\"Skip data validation\"] = true;",
									"    }",
									"    postman.setEnvironmentVariable(\"adminResourceId\", responseJSON.data.id);",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"endpoints\",\n        \"attributes\": {\n            \"name\": \"my_endpoint\",\n            \"description\": \"My first endpoint\"\n        }\n    }\n}"
						},
						"url": "{{be4Url}}/admin/endpoints"
					},
					"response": []
				},
				{
					"name": "GET single endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaBase\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    if (responseCode.code === 200) {",
									"        tests[\"Status equals 200\"] = true;",
									"        tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"        if (schema) {",
									"            tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"        } else {",
									"            tests[\"Skip data validation\"] = true;",
									"        }",
									"    } else if (responseCode.code === 404) {",
									"        tests[\"Status code is 404\"] = true;",
									"        tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/admin/endpoints/{{adminResourceId}}"
					},
					"response": []
				},
				{
					"name": "GET endpoints",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaFull\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 200\"] = responseCode.code === 200;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    } else {",
									"        tests[\"Skip data validation\"] = true;",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/admin/endpoints"
					},
					"response": []
				},
				{
					"name": "Modify endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var schema = postman.getEnvironmentVariable(\"schemaPatch\");",
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 200\"] = responseCode.code === 200;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    if (schema) {",
									"        tests[\"Valid data\"] = tv4.validate(responseJSON, schema);",
									"    } else {",
									"        tests[\"Skip data validation\"] = true;",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"id\": \"{{adminResourceId}}\",\n        \"type\": \"endpoints\",\n        \"attributes\": {\n            \"description\": \"New endpoint description\"\n        }\n    }\n}"
						},
						"url": "{{be4Url}}/admin/endpoints/{{adminResourceId}}"
					},
					"response": []
				},
				{
					"name": "Delete endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 204\"] = responseCode.code === 204;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    tests[\"Body matches string\"] = responseBody === \"\";",
									"    if (postman.getEnvironmentVariable(\"roleId\")) {",
									"        postman.clearEnvironmentVariable(\"roleId\");",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/admin/endpoints/{{adminResourceId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "8. Remove All",
			"description": "Remove all objects and resources created",
			"item": [
				{
					"name": "Delete role",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 204\"] = responseCode.code === 204;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    tests[\"Body matches string\"] = responseBody === \"\";",
									"    if (postman.getEnvironmentVariable(\"roleId\")) {",
									"        postman.setEnvironmentVariable(\"roleId\", \"\");",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/roles/{{roleId}}",
						"description": "DEL role"
					},
					"response": []
				},
				{
					"name": "Delete object relation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 204\"] = responseCode.code === 200;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": [\n\t    {\n\t        \"type\": \"{{objectTypeName}}\",\n\t\t    \"id\": \"{{objectId}}\"\n\t    }\n    ] \n}"
						},
						"url": "{{be4Url}}/users/1/relationships/{{relationName}}",
						"description": "DEL object"
					},
					"response": []
				},
				{
					"name": "Delete relation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 204\"] = responseCode.code === 204;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    tests[\"Body matches string\"] = responseBody === \"\";",
									"    if (postman.getEnvironmentVariable(\"objectTypeId\")) {",
									"        postman.clearEnvironmentVariable(\"objectTypeId\");",
									"    }",
									"    if (postman.getEnvironmentVariable(\"objectTypeName\")) {",
									"        postman.clearEnvironmentVariable(\"objectTypeName\");",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/model/relations/{{relationId}}",
						"description": "DELETE relation"
					},
					"response": []
				},
				{
					"name": "Delete object",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 204\"] = responseCode.code === 204;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    tests[\"Body matches string\"] = responseBody === \"\";",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/objects/{{objectId}}",
						"description": "DEL object"
					},
					"response": []
				},
				{
					"name": "Delete object permanently",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 204\"] = responseCode.code === 204;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    tests[\"Body matches string\"] = responseBody === \"\";",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/trash/{{objectId}}",
						"description": "DEL object"
					},
					"response": []
				},
				{
					"name": "Delete property",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 204\"] = responseCode.code === 204;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    tests[\"Body matches string\"] = responseBody === \"\";",
									"    if (postman.getEnvironmentVariable(\"propertyId\")) {",
									"        postman.clearEnvironmentVariable(\"propertyId\");",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/model/properties/{{propertyId}}",
						"description": "DEL object_type"
					},
					"response": []
				},
				{
					"name": "Delete object_type",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 204\"] = responseCode.code === 204;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    tests[\"Body matches string\"] = responseBody === \"\";",
									"    if (postman.getEnvironmentVariable(\"objectTypeId\")) {",
									"        postman.setEnvironmentVariable(\"objectTypeId\", \"\");",
									"    }",
									"    if (postman.getEnvironmentVariable(\"objectTypeName\")) {",
									"        postman.setEnvironmentVariable(\"objectTypeName\", \"\");",
									"    }",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/model/object_types/{{objectTypeName}}",
						"description": "DEL object_type"
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 204\"] = responseCode.code === 204;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    tests[\"Body matches string\"] = responseBody === \"\";",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/users/{{userId}}",
						"description": "DEL user"
					},
					"response": []
				},
				{
					"name": "Delete user permanently",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"try {",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests[\"Status code is 204\"] = responseCode.code === 204;",
									"    tests[\"Content-Type is correct\"] = postman.getResponseHeader(\"Content-Type\") === 'application/vnd.api+json';",
									"    tests[\"Body matches string\"] = responseBody === \"\";",
									"} catch (e) {",
									"    tests[\"Error in parsing response\"] = e;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt}}"
							},
							{
								"key": "X-Api-Key",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{be4Url}}/trash/{{userId}}"
					},
					"response": []
				}
			]
		}
	]
}
